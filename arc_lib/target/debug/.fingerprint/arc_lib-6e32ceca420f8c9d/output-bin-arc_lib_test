{"$message_type":"diagnostic","message":"unused import: `core::hash`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/bin.rs","byte_start":5,"byte_end":15,"line_start":2,"line_end":2,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"use core::hash;","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/bin.rs","byte_start":1,"byte_end":17,"line_start":2,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use core::hash;","highlight_start":1,"highlight_end":16},{"text":"use std::env;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `core::hash`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse core::hash;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `arc_types`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/bin.rs","byte_start":1634,"byte_end":1643,"line_start":55,"line_end":55,"column_start":22,"column_end":31,"is_primary":true,"text":[{"text":"    let (transicoes, arc_types) = find_arcos_v2(&saidas, n_entradas, 0); ","highlight_start":22,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/bin.rs","byte_start":1634,"byte_end":1643,"line_start":55,"line_end":55,"column_start":22,"column_end":31,"is_primary":true,"text":[{"text":"    let (transicoes, arc_types) = find_arcos_v2(&saidas, n_entradas, 0); ","highlight_start":22,"highlight_end":31}],"label":null,"suggested_replacement":"_arc_types","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `arc_types`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin.rs:55:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let (transicoes, arc_types) = find_arcos_v2(&saidas, n_entradas, 0); \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_arc_types`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `fontes`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/bin.rs","byte_start":2358,"byte_end":2364,"line_start":75,"line_end":75,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let fontes: Vec<Vec<(f64, f64)>> = fount_declaration(n_inputs, path, Vx, periodo, slape);","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/bin.rs","byte_start":2358,"byte_end":2364,"line_start":75,"line_end":75,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"    let fontes: Vec<Vec<(f64, f64)>> = fount_declaration(n_inputs, path, Vx, periodo, slape);","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"_fontes","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `fontes`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin.rs:75:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let fontes: Vec<Vec<(f64, f64)>> = fount_declaration(n_inputs, path,\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_fontes`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `ciclos`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/bin.rs","byte_start":2231,"byte_end":2237,"line_start":73,"line_end":73,"column_start":64,"column_end":70,"is_primary":true,"text":[{"text":"pub fn write_simulation_path(n_inputs: usize, path: &Vec<i32>, ciclos: i32, arc_types: HashMap<(i32, i32), (&str, usize)>, Vx: f64, periodo:f64,slape: f64 ) -> std::io::Result<()>{","highlight_start":64,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/bin.rs","byte_start":2231,"byte_end":2237,"line_start":73,"line_end":73,"column_start":64,"column_end":70,"is_primary":true,"text":[{"text":"pub fn write_simulation_path(n_inputs: usize, path: &Vec<i32>, ciclos: i32, arc_types: HashMap<(i32, i32), (&str, usize)>, Vx: f64, periodo:f64,slape: f64 ) -> std::io::Result<()>{","highlight_start":64,"highlight_end":70}],"label":null,"suggested_replacement":"_ciclos","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `ciclos`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin.rs:73:64\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m usize, path: &Vec<i32>, ciclos: i32, arc_types: HashMap<(i32, i32), \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_ciclos`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `arc_types`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/bin.rs","byte_start":2244,"byte_end":2253,"line_start":73,"line_end":73,"column_start":77,"column_end":86,"is_primary":true,"text":[{"text":"pub fn write_simulation_path(n_inputs: usize, path: &Vec<i32>, ciclos: i32, arc_types: HashMap<(i32, i32), (&str, usize)>, Vx: f64, periodo:f64,slape: f64 ) -> std::io::Result<()>{","highlight_start":77,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/bin.rs","byte_start":2244,"byte_end":2253,"line_start":73,"line_end":73,"column_start":77,"column_end":86,"is_primary":true,"text":[{"text":"pub fn write_simulation_path(n_inputs: usize, path: &Vec<i32>, ciclos: i32, arc_types: HashMap<(i32, i32), (&str, usize)>, Vx: f64, periodo:f64,slape: f64 ) -> std::io::Result<()>{","highlight_start":77,"highlight_end":86}],"label":null,"suggested_replacement":"_arc_types","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `arc_types`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin.rs:73:77\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mVec<i32>, ciclos: i32, arc_types: HashMap<(i32, i32), (&str, usize)>,\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_arc_types`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `Vx` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bin.rs","byte_start":2291,"byte_end":2293,"line_start":73,"line_end":73,"column_start":124,"column_end":126,"is_primary":true,"text":[{"text":"pub fn write_simulation_path(n_inputs: usize, path: &Vec<i32>, ciclos: i32, arc_types: HashMap<(i32, i32), (&str, usize)>, Vx: f64, periodo:f64,slape: f64 ) -> std::io::Result<()>{","highlight_start":124,"highlight_end":126}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_snake_case)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bin.rs","byte_start":2291,"byte_end":2293,"line_start":73,"line_end":73,"column_start":124,"column_end":126,"is_primary":true,"text":[{"text":"pub fn write_simulation_path(n_inputs: usize, path: &Vec<i32>, ciclos: i32, arc_types: HashMap<(i32, i32), (&str, usize)>, Vx: f64, periodo:f64,slape: f64 ) -> std::io::Result<()>{","highlight_start":124,"highlight_end":126}],"label":null,"suggested_replacement":"vx","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Vx` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin.rs:73:124\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mi32, i32), (&str, usize)>, Vx: f64, periodo:f64,slape: f64 ) -> std::\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `vx`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_snake_case)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `Vx` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/bin.rs","byte_start":2954,"byte_end":2956,"line_start":94,"line_end":94,"column_start":60,"column_end":62,"is_primary":true,"text":[{"text":"pub fn fount_declaration(n_inputs: usize, path: &Vec<i32>, Vx: f64, periodo:f64,slape: f64) -> Vec<Vec<(f64, f64)>>{","highlight_start":60,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/bin.rs","byte_start":2954,"byte_end":2956,"line_start":94,"line_end":94,"column_start":60,"column_end":62,"is_primary":true,"text":[{"text":"pub fn fount_declaration(n_inputs: usize, path: &Vec<i32>, Vx: f64, periodo:f64,slape: f64) -> Vec<Vec<(f64, f64)>>{","highlight_start":60,"highlight_end":62}],"label":null,"suggested_replacement":"vx","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `Vx` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin.rs:94:60\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0ms: usize, path: &Vec<i32>, Vx: f64, periodo:f64,slape: f64) -> Vec<Ve\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `vx`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"7 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 7 warnings emitted\u001b[0m\n\n"}
